scalar Time
scalar UUID

type Event {
  id: UUID!
  name: String!
  description: String
  startTime: Time!
  endTime: Time!
}

input EventInput {
  name: String!
  description: String
  startTime: Time!
  endTime: Time!
}

input UpdateEventInput {
  name: String
  description: String
  startTime: Time
  endTime: Time
}

type Query {
  allEvents: [Event!]
  eventsByTimeRange(startTime: Time!, endTime: Time!): [Event!]!
}

type Mutation {
  createEvent(input: EventInput!): Event!
  updateEvent(id: UUID!, input: UpdateEventInput!): Event!
  deleteEvent(id: UUID!): Boolean!
}

type EventChangePayload {
  action: String!
  event: Event!
}

type Subscription {
  eventChanged: EventChangePayload!
}